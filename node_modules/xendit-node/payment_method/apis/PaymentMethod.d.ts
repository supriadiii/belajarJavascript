/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
import * as runtime from '../../runtime';
import type { PaymentChannelList, PaymentMethod, PaymentMethodAuthParameters, PaymentMethodExpireParameters, PaymentMethodList, PaymentMethodParameters, PaymentMethodReusability, PaymentMethodStatus, PaymentMethodType, PaymentMethodUpdateParameters, SimulatePaymentRequest } from '../models';
export interface AuthPaymentMethodRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
    data?: PaymentMethodAuthParameters;
}
export interface CreatePaymentMethodRequest {
    data?: PaymentMethodParameters;
}
export interface ExpirePaymentMethodRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
    data?: PaymentMethodExpireParameters | null;
}
export interface GetAllPaymentChannelsRequest {
    isActivated?: GetAllPaymentChannelsIsActivatedEnum;
    type?: string;
    idempotencyKey?: string;
}
export interface GetAllPaymentMethodsRequest {
    id?: Array<string>;
    type?: Array<string>;
    status?: Array<PaymentMethodStatus>;
    reusability?: PaymentMethodReusability;
    customerId?: string;
    referenceId?: string;
    afterId?: string;
    beforeId?: string;
    limit?: number;
    idempotencyKey?: string;
}
export interface GetPaymentMethodByIDRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
}
export interface GetPaymentsByPaymentMethodIdRequest {
    paymentMethodId: string;
    paymentRequestId?: Array<string>;
    paymentMethodId2?: Array<string>;
    referenceId?: Array<string>;
    paymentMethodType?: Array<PaymentMethodType>;
    channelCode?: Array<string>;
    status?: Array<string>;
    currency?: Array<string>;
    createdGte?: Date;
    createdLte?: Date;
    updatedGte?: Date;
    updatedLte?: Date;
    limit?: number;
    idempotencyKey?: string;
}
export interface PatchPaymentMethodRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
    data?: PaymentMethodUpdateParameters;
}
export interface SimulatePaymentOperationRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
    data?: SimulatePaymentRequest;
}
/**
 *
 */
export declare class PaymentMethodApi extends runtime.BaseAPI {
    secretKey: string;
    xenditURL: string;
    constructor({ secretKey, xenditURL }: {
        secretKey: string;
        xenditURL?: string;
    });
    /**
     * This endpoint validates a payment method linking OTP
     * Validate a payment method\'s linking OTP
     */
    private authPaymentMethodRaw;
    /**
     * This endpoint validates a payment method linking OTP
     * Validate a payment method\'s linking OTP
     */
    authPaymentMethod(requestParameters: AuthPaymentMethodRequest): Promise<PaymentMethod>;
    /**
     * This endpoint initiates creation of payment method
     * Creates payment method
     */
    private createPaymentMethodRaw;
    /**
     * This endpoint initiates creation of payment method
     * Creates payment method
     */
    createPaymentMethod(requestParameters?: CreatePaymentMethodRequest): Promise<PaymentMethod>;
    /**
     * This endpoint expires a payment method and performs unlinking if necessary
     * Expires a payment method
     */
    private expirePaymentMethodRaw;
    /**
     * This endpoint expires a payment method and performs unlinking if necessary
     * Expires a payment method
     */
    expirePaymentMethod(requestParameters: ExpirePaymentMethodRequest): Promise<PaymentMethod>;
    /**
     * Get all payment channels
     * Get all payment channels
     */
    private getAllPaymentChannelsRaw;
    /**
     * Get all payment channels
     * Get all payment channels
     */
    getAllPaymentChannels(requestParameters?: GetAllPaymentChannelsRequest): Promise<PaymentChannelList>;
    /**
     * Get all payment methods by filters
     * Get all payment methods by filters
     */
    private getAllPaymentMethodsRaw;
    /**
     * Get all payment methods by filters
     * Get all payment methods by filters
     */
    getAllPaymentMethods(requestParameters?: GetAllPaymentMethodsRequest): Promise<PaymentMethodList>;
    /**
     * Get payment method by ID
     * Get payment method by ID
     */
    private getPaymentMethodByIDRaw;
    /**
     * Get payment method by ID
     * Get payment method by ID
     */
    getPaymentMethodByID(requestParameters: GetPaymentMethodByIDRequest): Promise<PaymentMethod>;
    /**
     * Returns payments with matching PaymentMethodID.
     * Returns payments with matching PaymentMethodID.
     */
    private getPaymentsByPaymentMethodIdRaw;
    /**
     * Returns payments with matching PaymentMethodID.
     * Returns payments with matching PaymentMethodID.
     */
    getPaymentsByPaymentMethodId(requestParameters: GetPaymentsByPaymentMethodIdRequest): Promise<object>;
    /**
     * This endpoint is used to toggle the ```status``` of an e-Wallet or a Direct Debit payment method to ```ACTIVE``` or ```INACTIVE```.  This is also used to update the details of an Over-the-Counter or a Virtual Account payment method.
     * Patch payment methods
     */
    private patchPaymentMethodRaw;
    /**
     * This endpoint is used to toggle the ```status``` of an e-Wallet or a Direct Debit payment method to ```ACTIVE``` or ```INACTIVE```.  This is also used to update the details of an Over-the-Counter or a Virtual Account payment method.
     * Patch payment methods
     */
    patchPaymentMethod(requestParameters: PatchPaymentMethodRequest): Promise<PaymentMethod>;
    /**
     * Makes payment with matching PaymentMethodID.
     * Makes payment with matching PaymentMethodID.
     */
    private simulatePaymentRaw;
    /**
     * Makes payment with matching PaymentMethodID.
     * Makes payment with matching PaymentMethodID.
     */
    simulatePayment(requestParameters: SimulatePaymentOperationRequest): Promise<void>;
}
/**
 * @export
 */
export declare const GetAllPaymentChannelsIsActivatedEnum: {
    readonly True: true;
    readonly False: false;
};
export type GetAllPaymentChannelsIsActivatedEnum = typeof GetAllPaymentChannelsIsActivatedEnum[keyof typeof GetAllPaymentChannelsIsActivatedEnum];
