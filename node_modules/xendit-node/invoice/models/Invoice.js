"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceToJSON = exports.InvoiceFromJSONTyped = exports.InvoiceFromJSON = exports.instanceOfInvoice = void 0;
var runtime_1 = require("../../runtime");
var Bank_1 = require("./Bank");
var CustomerObject_1 = require("./CustomerObject");
var DirectDebit_1 = require("./DirectDebit");
var Ewallet_1 = require("./Ewallet");
var InvoiceCurrency_1 = require("./InvoiceCurrency");
var InvoiceFee_1 = require("./InvoiceFee");
var InvoiceItem_1 = require("./InvoiceItem");
var InvoicePaymentMethod_1 = require("./InvoicePaymentMethod");
var InvoiceStatus_1 = require("./InvoiceStatus");
var NotificationPreference_1 = require("./NotificationPreference");
var Paylater_1 = require("./Paylater");
var QrCode_1 = require("./QrCode");
var RetailOutlet_1 = require("./RetailOutlet");
/**
 * Check if a given object implements the Invoice interface.
 */
function instanceOfInvoice(value) {
    var isInstance = true;
    isInstance = isInstance && "externalId" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "merchantName" in value;
    isInstance = isInstance && "merchantProfilePictureUrl" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "expiryDate" in value;
    isInstance = isInstance && "invoiceUrl" in value;
    isInstance = isInstance && "availableBanks" in value;
    isInstance = isInstance && "availableRetailOutlets" in value;
    isInstance = isInstance && "availableEwallets" in value;
    isInstance = isInstance && "availableQrCodes" in value;
    isInstance = isInstance && "availableDirectDebits" in value;
    isInstance = isInstance && "availablePaylaters" in value;
    isInstance = isInstance && "shouldSendEmail" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    return isInstance;
}
exports.instanceOfInvoice = instanceOfInvoice;
function InvoiceFromJSON(json) {
    return InvoiceFromJSONTyped(json, false);
}
exports.InvoiceFromJSON = InvoiceFromJSON;
function InvoiceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'externalId': json['external_id'],
        'userId': json['user_id'],
        'payerEmail': !(0, runtime_1.exists)(json, 'payer_email') ? undefined : json['payer_email'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'paymentMethod': !(0, runtime_1.exists)(json, 'payment_method') ? undefined : (0, InvoicePaymentMethod_1.InvoicePaymentMethodFromJSON)(json['payment_method']),
        'status': (0, InvoiceStatus_1.InvoiceStatusFromJSON)(json['status']),
        'merchantName': json['merchant_name'],
        'merchantProfilePictureUrl': json['merchant_profile_picture_url'],
        'locale': !(0, runtime_1.exists)(json, 'locale') ? undefined : json['locale'],
        'amount': json['amount'],
        'expiryDate': (new Date(json['expiry_date'])),
        'invoiceUrl': json['invoice_url'],
        'availableBanks': (json['available_banks'].map(Bank_1.BankFromJSON)),
        'availableRetailOutlets': (json['available_retail_outlets'].map(RetailOutlet_1.RetailOutletFromJSON)),
        'availableEwallets': (json['available_ewallets'].map(Ewallet_1.EwalletFromJSON)),
        'availableQrCodes': (json['available_qr_codes'].map(QrCode_1.QrCodeFromJSON)),
        'availableDirectDebits': (json['available_direct_debits'].map(DirectDebit_1.DirectDebitFromJSON)),
        'availablePaylaters': (json['available_paylaters'].map(Paylater_1.PaylaterFromJSON)),
        'shouldExcludeCreditCard': !(0, runtime_1.exists)(json, 'should_exclude_credit_card') ? undefined : json['should_exclude_credit_card'],
        'shouldSendEmail': json['should_send_email'],
        'created': (new Date(json['created'])),
        'updated': (new Date(json['updated'])),
        'successRedirectUrl': !(0, runtime_1.exists)(json, 'success_redirect_url') ? undefined : json['success_redirect_url'],
        'failureRedirectUrl': !(0, runtime_1.exists)(json, 'failure_redirect_url') ? undefined : json['failure_redirect_url'],
        'shouldAuthenticateCreditCard': !(0, runtime_1.exists)(json, 'should_authenticate_credit_card') ? undefined : json['should_authenticate_credit_card'],
        'currency': !(0, runtime_1.exists)(json, 'currency') ? undefined : (0, InvoiceCurrency_1.InvoiceCurrencyFromJSON)(json['currency']),
        'items': !(0, runtime_1.exists)(json, 'items') ? undefined : (json['items'].map(InvoiceItem_1.InvoiceItemFromJSON)),
        'fixedVa': !(0, runtime_1.exists)(json, 'fixed_va') ? undefined : json['fixed_va'],
        'reminderDate': !(0, runtime_1.exists)(json, 'reminder_date') ? undefined : (new Date(json['reminder_date'])),
        'customer': !(0, runtime_1.exists)(json, 'customer') ? undefined : (0, CustomerObject_1.CustomerObjectFromJSON)(json['customer']),
        'customerNotificationPreference': !(0, runtime_1.exists)(json, 'customer_notification_preference') ? undefined : (0, NotificationPreference_1.NotificationPreferenceFromJSON)(json['customer_notification_preference']),
        'fees': !(0, runtime_1.exists)(json, 'fees') ? undefined : (json['fees'].map(InvoiceFee_1.InvoiceFeeFromJSON)),
    };
}
exports.InvoiceFromJSONTyped = InvoiceFromJSONTyped;
function InvoiceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'external_id': value.externalId,
        'user_id': value.userId,
        'payer_email': value.payerEmail,
        'description': value.description,
        'payment_method': (0, InvoicePaymentMethod_1.InvoicePaymentMethodToJSON)(value.paymentMethod),
        'status': (0, InvoiceStatus_1.InvoiceStatusToJSON)(value.status),
        'merchant_name': value.merchantName,
        'merchant_profile_picture_url': value.merchantProfilePictureUrl,
        'locale': value.locale,
        'amount': value.amount,
        'expiry_date': (value.expiryDate.toISOString()),
        'invoice_url': value.invoiceUrl,
        'available_banks': (value.availableBanks.map(Bank_1.BankToJSON)),
        'available_retail_outlets': (value.availableRetailOutlets.map(RetailOutlet_1.RetailOutletToJSON)),
        'available_ewallets': (value.availableEwallets.map(Ewallet_1.EwalletToJSON)),
        'available_qr_codes': (value.availableQrCodes.map(QrCode_1.QrCodeToJSON)),
        'available_direct_debits': (value.availableDirectDebits.map(DirectDebit_1.DirectDebitToJSON)),
        'available_paylaters': (value.availablePaylaters.map(Paylater_1.PaylaterToJSON)),
        'should_exclude_credit_card': value.shouldExcludeCreditCard,
        'should_send_email': value.shouldSendEmail,
        'created': (value.created.toISOString()),
        'updated': (value.updated.toISOString()),
        'success_redirect_url': value.successRedirectUrl,
        'failure_redirect_url': value.failureRedirectUrl,
        'should_authenticate_credit_card': value.shouldAuthenticateCreditCard,
        'currency': (0, InvoiceCurrency_1.InvoiceCurrencyToJSON)(value.currency),
        'items': value.items === undefined ? undefined : (value.items.map(InvoiceItem_1.InvoiceItemToJSON)),
        'fixed_va': value.fixedVa,
        'reminder_date': value.reminderDate === undefined ? undefined : (value.reminderDate.toISOString()),
        'customer': (0, CustomerObject_1.CustomerObjectToJSON)(value.customer),
        'customer_notification_preference': (0, NotificationPreference_1.NotificationPreferenceToJSON)(value.customerNotificationPreference),
        'fees': value.fees === undefined ? undefined : (value.fees.map(InvoiceFee_1.InvoiceFeeToJSON)),
    };
}
exports.InvoiceToJSON = InvoiceToJSON;
